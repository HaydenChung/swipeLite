/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _carousel = __webpack_require__(1);

	var _carousel2 = _interopRequireDefault(_carousel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var wrapper = document.querySelector('#section');

	var test = new _carousel2.default(wrapper);
	console.log(test);
	test.block(3).space(20).start();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _mouse = __webpack_require__(2);

	var _mouse2 = _interopRequireDefault(_mouse);

	var _touch = __webpack_require__(3);

	var _touch2 = _interopRequireDefault(_touch);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Carousel = function () {
	    function Carousel(targetElm) {
	        _classCallCheck(this, Carousel);

	        this.container = targetElm;
	        this.initiatePos = { x: 0, y: 0 };
	        this.actingPos = { x: 0, y: 0 };
	        this.desistPos = { x: 0, y: 0 };
	        this.staticPos = { x: 0, y: 0 };
	        //parent to the container,places outside  
	        this.contRect = this.container.getBoundingClientRect();
	        this.parentRect = this.container.parentNode.getBoundingClientRect();
	        this.nodeRect = this.container.children[0].getBoundingClientRect();
	        this.nodeOuterWidth = 0;
	        this.method = {};
	        this.distance = 0;
	        this.animationLoop = 0;
	        this.desitPromise = {};
	        this.onResolve = {};
	        this.nodesArr = {};
	        this.singleBlock = {
	            perScreen: 0,
	            width: 0,
	            margin: 0
	        };
	        this.fakeBlock = 0;
	    }

	    _createClass(Carousel, [{
	        key: "start",
	        value: function start() {
	            var _this = this;

	            this.container.addEventListener('mousedown', function (e) {
	                _this._inputHandle(e);
	            });

	            this.container.addEventListener('touchstart', function (e) {
	                _this._inputHandle(e);
	            });

	            this._initiate();

	            window.addEventListener('resize', this._resize.bind(this));
	        }
	    }, {
	        key: "_inputHandle",
	        value: function _inputHandle(e) {
	            var _this2 = this;

	            if (typeof e.targetTouches != 'undefined') {
	                _touch2.default.down.call(this, e);
	            } else {
	                _mouse2.default.down.call(this, e);
	            }
	            this.container.style.transitionDuration = "0s";
	            this.contRect = this.container.getBoundingClientRect();
	            this.parentRect = this.container.parentNode.getBoundingClientRect();
	            this.nodeRect = this.container.children[0].getBoundingClientRect();
	            this.nodeOuterWidth = this.container.children[1].getBoundingClientRect().left - this.nodeRect.left;
	            this.distance = this.initiatePos.x - (this.contRect.left - this.parentRect.left);
	            this.desitPromise = new Promise(function (resolve) {
	                _this2.onResolve = resolve;
	            });
	            this._swiping.apply(this);
	        }
	    }, {
	        key: "_swiping",
	        value: function _swiping() {
	            var _this3 = this;

	            this.animationLoop = requestAnimationFrame(this._swiping.bind(this));
	            this.container.style.transform = "translate3d(" + (this.actingPos.x - this.distance) + "px, 0, 0)";
	            console.log('leftLimit:', this.container.parentNode.getBoundingClientRect().left - this.container.getBoundingClientRect().left);
	            console.log('rightLimit:', this.container.getBoundingClientRect().right - this.container.parentNode.getBoundingClientRect().right);
	            if (this.container.parentNode.getBoundingClientRect().left - this.container.getBoundingClientRect().left <= this.nodeOuterWidth) {
	                //            this.distance += this.contRect.width/2-(this.nodeOuterWidth-this.singleBlock.margin);
	                this.distance += this.nodeOuterWidth * this.origNodesCount;
	            }
	            if (this.container.getBoundingClientRect().right - this.container.parentNode.getBoundingClientRect().right <= this.nodeOuterWidth) {
	                //            this.distance += -this.contRect.width/2+(this.nodeOuterWidth-this.singleBlock.margin);
	                this.distance += -this.nodeOuterWidth * this.origNodesCount;
	            }
	            console.log(this.distance);
	            this.desitPromise.then(function () {
	                _this3._end();
	            });
	        }
	    }, {
	        key: "_end",
	        value: function _end() {
	            cancelAnimationFrame(this.animationLoop);
	            this.container.style.transitionDuration = "0.5s";
	            this.staticPos = Math.round((this.actingPos.x - this.distance) / this.nodeOuterWidth) * this.nodeOuterWidth;
	            this.container.style.transform = "translate3d(" + this.staticPos + "px, 0, 0)";
	        }
	    }, {
	        key: "_initiate",
	        value: function _initiate() {

	            this.nodesArr = this.container.querySelectorAll('div');
	            this.origNodesCount = this.nodesArr.length;
	            this._resize.apply(this);
	            this.staticPos = -this.nodeOuterWidth * (Math.floor(this.nodesArr.length / 2) + 1);
	            this.container.style.transform = "translate3d(" + this.staticPos + "px, 0, 0)";
	            var lenI = Math.floor(this.nodesArr.length / 2);
	            for (var i = 0; i <= lenI; i++) {
	                this.container.appendChild(this.nodesArr[i].cloneNode(true));
	            }
	            for (var j = this.nodesArr.length - 1; j >= lenI; j--) {
	                this.container.insertBefore(this.nodesArr[j].cloneNode(true), this.container.firstElementChild);
	            }
	        }
	    }, {
	        key: "_resize",
	        value: function _resize() {
	            this.contRect = this.container.getBoundingClientRect();
	            this.parentRect = this.container.parentNode.getBoundingClientRect();
	            this.nodeRect = this.container.children[0].getBoundingClientRect();

	            this.singleBlock.width = this.parentRect.width / this.singleBlock.perScreen - this.singleBlock.margin * 2;

	            this.nodesArr = this.container.querySelectorAll('div');
	            this.container.style.width = (this.singleBlock.width + this.singleBlock.margin) * (this.origNodesCount + 1) * 2 + 'px';
	            this.container.style.height = '100%';

	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this.nodesArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var node = _step.value;

	                    node.style.width = this.singleBlock.width + 'px';
	                    node.style.height = '100%';
	                    node.style.margin = '0 ' + this.singleBlock.margin + 'px';
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            this.nodeOuterWidth = this.singleBlock.width + this.singleBlock.margin * 2;
	            this.staticPos = Math.round(this.staticPos / this.nodeOuterWidth) * this.nodeOuterWidth;
	            this.container.style.transform = "translate3d(" + this.staticPos + "px, 0, 0)";
	        }
	    }, {
	        key: "block",
	        value: function block(num) {
	            this.singleBlock.perScreen = num;
	            return this;
	        }
	    }, {
	        key: "space",
	        value: function space(num) {
	            this.singleBlock.margin = num;
	            return this;
	        }
	    }]);

	    return Carousel;
	}();

	exports.default = Carousel;

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Mouse = function () {
	    function Mouse() {
	        _classCallCheck(this, Mouse);
	    }

	    _createClass(Mouse, null, [{
	        key: 'down',
	        value: function down(e) {
	            e.preventDefault();
	            this.boundMove = Mouse.move.bind(this);
	            this.boundDesist = Mouse.desist.bind(this);
	            window.addEventListener('mousemove', this.boundMove);
	            window.addEventListener('mouseup', this.boundDesist);
	            //Didn't invoke when mouse leaving window,need to google.
	            //        window.addEventListener('mouseleave',Mouse.desist);
	            this.initiatePos = { x: e.clientX, y: e.clientY };
	            this.actingPos = this.initiatePos;
	        }
	    }, {
	        key: 'move',
	        value: function move(e) {
	            e.preventDefault();
	            this.actingPos = { x: e.clientX, y: e.clientY };
	        }
	    }, {
	        key: 'desist',
	        value: function desist(e) {
	            e.preventDefault();
	            window.removeEventListener('mousemove', this.boundMove);
	            window.removeEventListener('mouseup', this.boundDesist);
	            //        window.removeEventListener('mouseleave',Mouse.desist);
	            this.desistPos = { x: e.clientX, y: e.clientY };
	            this.onResolve();
	            console.log(this);
	        }
	    }]);

	    return Mouse;
	}();

	exports.default = Mouse;

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Touch = function () {
	    function Touch() {
	        _classCallCheck(this, Touch);
	    }

	    _createClass(Touch, null, [{
	        key: 'down',
	        value: function down(e) {
	            e.preventDefault();
	            this.boundMove = Touch.move.bind(this);
	            this.boundDesist = Touch.desist.bind(this);
	            this.initiatePos = { x: e.targetTouches[0].pageX, y: e.targetTouches[0].pageY };
	            this.actingPos = this.initiatePos;
	            window.addEventListener('touchmove', this.boundMove);
	            window.addEventListener('touchend', this.boundDesist);
	            document.addEventListener('touchcancel', this.boundDesist);
	        }
	    }, {
	        key: 'move',
	        value: function move(e) {
	            e.preventDefault();
	            this.actingPos = { x: e.targetTouches[0].pageX, y: e.targetTouches[0].pageY };
	        }
	    }, {
	        key: 'desist',
	        value: function desist(e) {
	            e.preventDefault();
	            window.removeEventListener('touchmove', this.boundMove);
	            window.removeEventListener('touchend', this.boundDesist);
	            window.removeEventListener('touchcancel', this.boundDesist);
	            this.desistPos = this.actingPos;
	            this.onResolve();
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel(e) {
	            e.preventDefault();
	            window.removeEventListener('touchmove', this.boundMove);
	            window.removeEventListener('touchend', this.boundDesist);
	            window.removeEventListener('touchcancel', this.boundDesist);
	            this.desistPos = this.actingPos;
	        }
	    }]);

	    return Touch;
	}();

	exports.default = Touch;

/***/ }
/******/ ]);